---
description: analyzeSvelteComponent
globs: 
---
# Svelte Component Analysis Rule

Reglas para analizar componentes Svelte e identificar lógicas que pueden ser migradas a pulses.

## 0. REGLA PRIORITARIA: Análisis de Componentes Svelte

### 0.1 Identificación de Importaciones a Migrar
- **CRÍTICO**: Toda importación que no sea de:
  * Librerías externas (node_modules)
  * Componentes Svelte
  * ClientPulse (`import { Pulse as ClientPulse } from '../lib/clientPulses'`)
  * Tipos TypeScript
  DEBE ser migrada a Pulses.

### 0.2 Proceso de Migración
1. **Identificación de Importaciones**:
   ```typescript
   // ❌ Importaciones a migrar
   import { utilFunction } from '../utils/someUtil';
   import { helper } from '../helpers/helper';
   import { service } from '../services/service';

   // ✅ Importaciones permitidas
   import { Pulse as ClientPulse } from '../lib/clientPulses';
   import Component from './Component.svelte';
   import type { SomeType } from '../types/types';
   ```

2. **Flujo de Análisis y Migración**:
   ```mermaid
   graph TD
   A[Identificar Importación] --> B{¿Es Migrable?}
   B -->|Sí| C[Aplicar analyzeSourceFile.md]
   B -->|No| D[Mantener Importación]
   C --> E[Crear Pulse]
   E --> F[Actualizar Componente]
   F --> G[Eliminar Importación Original]
   ```

3. **Pasos para cada importación identificada**:
   a. Localizar el archivo fuente
   b. **APLICAR analyzeSourceFile.md para análisis completo**
   c. Diseñar pulses basados en las acciones identificadas
   d. Actualizar el componente para usar los nuevos pulses
   e. Eliminar importaciones y archivos originales

## 1. Patrones Específicos de Svelte

### 1.1 Lógica de Componente vs Lógica de Negocio
```typescript
// ❌ Lógica de Componente (NO migrar a pulse)
function handleClick() {
  isOpen = !isOpen;
}

// ✅ Lógica de Negocio (migrar a pulse)
function processUserData(data) {
  // Validación y transformación de datos
}
```

### 1.2 Estado del Componente
1. **Estado Local** (No migrar):
   ```typescript
   let count = 0;
   let isVisible = true;
   ```

2. **Estado de Negocio** (Considerar migrar):
   ```typescript
   let userData = null;
   let validationErrors = [];
   ```

### 1.3 Eventos y Efectos
1. **Eventos de UI** (No migrar):
   ```typescript
   function onMount() {
     // Configuración de UI
   }
   ```

2. **Efectos de Negocio** (Considerar migrar):
   ```typescript
   $: if (userData) {
     validateUserData(userData);
   }
   ```

## 2. Proceso de Análisis de Componente

1. **Revisión de Importaciones**:
   - [ ] Identificar importaciones migrables
   - [ ] Aplicar analyzeSourceFile.md para cada una
   - [ ] Documentar dependencias

2. **Análisis de Funciones**:
   - [ ] Separar lógica de UI vs negocio
   - [ ] Identificar candidatos para pulses
   - [ ] Mapear dependencias internas

3. **Evaluación de Estado**:
   - [ ] Identificar estado local vs negocio
   - [ ] Evaluar necesidad de stores
   - [ ] Planear migración de estado

4. **Plan de Migración**:
   - [ ] Diseñar pulses necesarios
   - [ ] Planear orden de migración
   - [ ] Identificar impacto en UI

## 3. Ejemplo de Análisis

```typescript
// Componente Original
<script>
  import { processData } from '../utils/dataUtils';
  
  let inputValue = '';
  let isProcessing = false;
  let result = null;

  async function handleSubmit() {
    isProcessing = true;
    try {
      result = await processData(inputValue);
    } catch (error) {
      console.error(error);
    }
    isProcessing = false;
  }
</script>

// Análisis:
/*
1. Importaciones Migrables:
   - processData de dataUtils
   → Aplicar analyzeSourceFile.md

2. Estado:
   - inputValue (UI) ✅ Mantener
   - isProcessing (UI) ✅ Mantener
   - result (Negocio) ❌ Mover a pulse

3. Funciones:
   - handleSubmit (Mixto)
     → Separar en:
       * UI: manejo de isProcessing
       * Negocio: llamada a pulse
*/

// Resultado Final:
<script>
  import { Pulse as ClientPulse } from '../lib/clientPulses';
  
  let inputValue = '';
  let isProcessing = false;
  
  async function handleSubmit() {
    isProcessing = true;
    try {
      const response = await ClientPulse.DatosProcesar({ 
        input: inputValue 
      });
      result = response.data;
    } catch (error) {
      console.error(error);
    }
    isProcessing = false;
  }
</script>
```

## 4. Checklist Final

- [ ] Importaciones analizadas y documentadas
- [ ] Archivos fuente analizados con analyzeSourceFile.md
- [ ] Lógica de UI vs negocio identificada
- [ ] Estado categorizado
- [ ] Pulses diseñados
- [ ] Componente actualizado
- [ ] Pruebas realizadas
- [ ] Documentación actualizada

metadata:
  priority: critical
  version: 1.1
  tags:
    - svelte
    - analysis
    - pulses
    - refactoring
    - migration