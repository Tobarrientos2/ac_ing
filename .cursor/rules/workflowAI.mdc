---
description: Worflow iss
globs: 
---
# AI Workflow Rule

Reglas generales para el flujo de trabajo de la IA.

<rule>
name: ai_workflow_respect
description: Flujos de trabajo estándar para diferentes tareas
filters:
  - type: event
    pattern: "file_create|file_modify"

actions:
  - type: suggest
    message: |
      # Flujos de Trabajo de la IA

      ## 0. REGLAS CRÍTICAS

      ### 0.1 Gestión de Tipos TypeScript
      - **CRÍTICO**: Todos los tipos de la aplicación DEBEN estar centralizados en:
        ```
        src/lib/types/types.ts
        ```
      
      - **Estructura del archivo types.ts**:
        ```typescript
        // 1. Tipos base (interfaces fundamentales)
        export interface BaseType {
          // ...
        }

        // 2. Tipos para Pulses
        export interface PulseResponse<T> {
          success: boolean;
          data?: T;
          error?: string;
        }

        // 3. Tipos específicos por funcionalidad
        export interface SpecificFeatureType {
          // ...
        }
        ```

      - **Reglas de Tipos**:
        * NO crear archivos de tipos separados
        * NO definir tipos en archivos de componentes
        * NO definir tipos en archivos de pulses
        * Mantener tipos relacionados agrupados con comentarios
        * Documentar tipos complejos
        * Usar exports nombrados

      - **Proceso para Nuevos Tipos**:
        1. Identificar necesidad de nuevo tipo
        2. Verificar si existe tipo similar en `types.ts`
        3. Agregar nuevo tipo en la sección apropiada
        4. Documentar el tipo si es complejo
        5. Exportar el tipo
        6. Importar desde donde se necesite

      ### 0.2 Migración de Utils y Archivos JS/TS a Pulses
      // ... resto del contenido existente ...

      ## 1. Refactorización de Componentes Svelte con Pulses
      
      CUANDO el usuario solicite "refactorizar un componente Svelte con Pulses":

      1. **Análisis del Componente**:
         - Leer `analyzeSvelteComponent.mdc`
         - Analizar el componente siguiendo los criterios:
           * Patrones de operaciones aislables
           * Características de reutilización
           * Indicadores positivos/negativos
           * Ejemplos similares
         - Identificar candidatos para pulses
         - **IMPORTANTE**: Seleccionar UNA SOLA lógica para refactorizar
         - Informar al usuario sobre la lógica seleccionada y esperar confirmación

      2. **Ciclo Completo para el Pulse Seleccionado**:
         a. **Creación del Pulse**:
            1. Leer `createPulse.mdc`
            2. Crear el pulse siguiendo la estructura definida
            3. Validar que cumpla con todas las reglas

         b. **Testing del Pulse**:
            1. Leer `createTestForPulse.mdc`
            2. Crear tests siguiendo la estructura definida

         c. **Ejecución y Validación de Tests**:
            1. Leer `runCreatedTest.mdc`
            2. Verificar entorno de testing
            3. Ejecutar tests específicos del pulse
            4. Si fallan:
               * Analizar tipo de error (pulse/test/tipos)
               * Aplicar correcciones necesarias
               * Re-ejecutar tests
               * Máximo 3 iteraciones antes de consultar al usuario
            5. No continuar hasta que los tests pasen

         d. **Implementación en Componente**:
            1. Leer `usePulse.mdc`
            2. Refactorizar el componente para usar el nuevo pulse
            3. Verificar que la funcionalidad se mantiene

         e. **Documentación y Push**:
            1. Leer `createIssue.mdc`
            2. Crear issue documentando cambios
            3. Leer `createCommitAndPush.mdc`
            4. **IMPORTANTE**: Utilizar el mismo repositorio y usuario (Tobarrientos2) que se usó en createIssue.mdc
            5. Realizar commit y push siguiendo convenciones

      3. **Siguiente Iteración** (SOLO si el usuario lo solicita explícitamente):
         - Si el usuario desea refactorizar otra lógica del mismo componente:
           1. Volver al paso 1 para seleccionar una nueva lógica
           2. Repetir el ciclo completo para esa nueva lógica
         - NUNCA iniciar la refactorización de múltiples lógicas simultáneamente

      ## 2. Creación de Issues en GitHub

      CUANDO el usuario solicite "crear un issue":

      1. Leer `createIssue.mdc`
      2. Seguir el formato especificado
      3. Usar MCP server de GitHub para crear el issue
      4. **IMPORTANTE**: Almacenar el repositorio y usuario utilizados para su uso posterior en commits y pushes

      ## 3. Creación de Pulses Individuales

      CUANDO el usuario solicite "crear un pulse":

      1. Leer `createPulse.mdc`
      2. Crear el pulse
      3. Leer `createTestForPulse.mdc`
      4. Crear los tests
      5. Leer `runCreatedTest.mdc`
      6. Ejecutar y verificar tests

      ## 4. Implementación de Pulses en Componentes

      CUANDO el usuario solicite "implementar un pulse en un componente":

      1. Leer `usePulse.mdc`
      2. Implementar siguiendo las guías
      3. Verificar la implementación

      ## 5. Análisis de Componentes Svelte

      CUANDO el usuario solicite "analizar un componente Svelte":

      1. Leer `analyzeSvelteComponent.mdc`
      2. Seguir proceso de análisis:
         - Revisión inicial
         - Evaluación
         - Decisión
         - Documentación
      3. Presentar resultados al usuario
      4. Sugerir posibles refactorizaciones

      ## 6. Commit y Push de Cambios

      CUANDO el usuario solicite "hacer push de cambios":

      1. Leer `createCommitAndPush.mdc`
      2. Verificar remotes:
         - Si hay uno solo, usarlo
         - Si hay múltiples, consultar al usuario
      3. Preparar mensaje de commit:
         - Seguir convención de tipos
         - Incluir número de issue
         - Respetar límites de caracteres
      4. Usar MCP GitHub para push:
         - Verificar rama correcta
         - Validar permisos
         - Manejar errores si ocurren
      5. **IMPORTANTE**: Si este push está relacionado con un issue creado previamente, asegurarse de usar el mismo repositorio y usuario (Tobarrientos2) que se usó en createIssue.mdc

      ## Reglas Generales

      1. **Orden de Lectura de MDCs**:
         - Siempre leer los MDCs en el orden especificado para cada flujo
         - No saltar pasos del flujo

      2. **Validación**:
         - Verificar que cada paso cumple con su MDC correspondiente
         - No proceder al siguiente paso hasta validar el actual

      3. **Tests**:
         - Siempre crear y ejecutar tests para nuevos pulses
         - Seguir el proceso de `runCreatedTest.mdc` para validación
         - No implementar en componentes hasta que los tests pasen

      4. **Documentación**:
         - Crear issues para cambios significativos
         - Documentar decisiones importantes

      5. **Tipos**:
         - Centralizar TODOS los tipos en `types.ts`
         - Mantener la estructura organizada y documentada
         - No duplicar definiciones de tipos
         - Usar tipos específicos en lugar de `any`

      ## Notas Importantes

      1. Solo iniciar estos flujos cuando el usuario lo solicite explícitamente
      2. Mantener al usuario informado del progreso
      3. Solicitar confirmación en pasos críticos
      4. Documentar cualquier decisión importante tomada
      5. NUNCA trabajar en múltiples pulses simultáneamente
      6. Completar el ciclo completo de un pulse antes de pasar al siguiente
      7. Mantener consistencia en el uso del repositorio y usuario entre issues y commits
      8. SIEMPRE definir tipos en `types.ts`

      ## Resumen de MDCs Disponibles

      1. `createPulse.mdc`: Creación de pulses
      2. `createTestForPulse.mdc`: Tests para pulses
      3. `runCreatedTest.mdc`: Ejecución y validación de tests
      4. `usePulse.mdc`: Implementación de pulses
      5. `createIssue.mdc`: Creación de issues
      6. `analyzeSvelteComponent.mdc`: Análisis de componentes
      7. `createCommitAndPush.mdc`: Commits y push
      8. `workflowAI.mdc`: Flujo general de trabajo

      ### 0.3 Verificación OBLIGATORIA de Estado Actual
- **CRÍTICO**: La IA DEBE verificar el estado actual ANTES de CUALQUIER acción que:
  1. Modifique archivos
  2. Documente cambios
  3. Genere commits/issues

- **Proceso de Verificación**:
  ```typescript
  // Ejemplo de verificación sistemática
  async function verificarEstadoActual(archivos: string[]) {
    const estadoActual = {};
    for (const archivo of archivos) {
      const contenido = await read_file({
        relative_workspace_path: archivo,
        should_read_entire_file: true
      });
      estadoActual[archivo] = contenido;
    }
    return estadoActual;
  }
  ```

- **Reglas de Verificación**:
  * NUNCA asumir estado basado en el historial de la conversación
  * SIEMPRE leer el estado actual antes de:
    - Crear un issue
    - Hacer commit/push
    - Sugerir cambios adicionales
  * SIEMPRE informar discrepancias al usuario
  * SIEMPRE usar la información más reciente

- **Comportamiento por Etapa**:
  1. **Antes de Crear Issue**:
     - Verificar estado actual de TODOS los archivos relevantes
     - Documentar solo los cambios confirmados
     - Esta verificación servirá también para el commit posterior

  2. **Antes de Commit/Push**:
     - NO es necesario verificar nuevamente si ya se verificó para el issue
     - Usar la información de la última verificación
     - Solo verificar nuevamente si el usuario indica cambios adicionales

  3. **Antes de Sugerir Cambios**:
     - Verificar estado actual
     - Comparar con el estado esperado
     - Informar discrepancias

- **Ejemplos de Uso**:
  ```typescript
  // Antes de crear issue
  const estadoActual = await verificarEstadoActual([
    'src/lib/components/Component.svelte',
    'src/lib/types/types.ts'
  ]);
  // Este estado servirá tanto para el issue como para el commit

  // Si el usuario indica cambios adicionales
  const nuevoEstado = await verificarEstadoActual([
    'src/lib/components/Component.svelte'
  ]);
  // Verificar solo lo necesario
  ```

- **Manejo de Errores**:
  * Si no se puede verificar → DETENER y notificar al usuario
  * Si hay discrepancias → DETENER y solicitar clarificación
  * Si hay archivos faltantes → DETENER y reportar

- **Beneficios**:
  * Evita documentación incorrecta
  * Previene commits basados en suposiciones
  * Mantiene sincronización con el estado real
  * Reduce errores de comunicación

  ### 0.4 Verificación y Creación de ClientPulses
- **CRÍTICO**: La IA DEBE verificar la existencia de `clientPulses.ts` cuando:
  1. Se implementen pulses en componentes
  2. Se detecten importaciones de `$lib/clientPulses`
  3. Se encuentren errores de módulo no encontrado

- **Proceso de Verificación**:
  ```typescript
  // Verificar existencia del archivo
  const clientPulsesExists = await read_file({
    relative_workspace_path: "src/lib/clientPulses.ts",
    should_read_entire_file: true
  });

  if (!clientPulsesExists) {
    // Leer y aplicar createClientPulsesFile.mdc
    await fetch_rules(["createClientPulsesFile"]);
  }
  ```

- **Reglas de Verificación**:
  * SIEMPRE verificar antes de implementar pulses
  * Si no existe, DETENER y crear usando `createClientPulsesFile.mdc`
  * NUNCA asumir su existencia basado en el historial

metadata:
  priority: critical
  version: 1.2
  tags:
    - workflow
    - ai
    - automation
    - types
    - typescript